--
-- basic macros: implicit import
--

--define* [bind
--    macro* [a
--        macro* [b
--            code'|define* [{a b}]
--        ]
--    ]
--]
bind [macro]
| macro* [{args}
    macro* [body
        code'|macro* [{args body}]
    ]
]
bind [if]
| macro [{condition}]
    | macro [{then}]
        | macro [{else}]
            | code'|if* [{condition} do[{then}] do[{else}]]
            
bind [of]
| macro [{args}]
    | macro [{body}]
        | macro [{alt}]
	       | code'|functions* [args-list[{args}] do[{body}] {alt}]
            
bind [match]
| macro [{args}]
	| macro [op]
		--| code'|{op}[{args}]
		| code'|invoke* [{op args}]
		
bind[async]
	| macro [method]
		| macro [{args}]
			code'|async*[method {args}]
			

--curious:
--bind [if]
--| of [=|true a _] [a]
--| of [=|false _ b] [b]
--!

--
-- basic functional operators: implicit import
--    
bind [fold-right]
| of [fn initial list[head {tail}]] [fn[head fold-right[fn initial tail]]]
| of [fn initial _] [initial] -- | of [fn initial list!] [initial]
!


bind [range]
| of [a b] [
	bind [i][a]
	bind [lst][list!]

	while [<[i b] do [
		.[lst push][i]
		mutate*[i +[i 1]]
	]]
	lst
]!

bind [map]
| of [f lst] [
	bind [i][0]
	bind [ret][list!]
	while[<[i lst|length] do[
		.[ret push][f[lst|id*[i]]]
		mutate*[i +[1 i]]
	]]
	ret
]!

-- map that ignores the result -- only cares about side effects
--bind [map-side]
--| of [f lst] [
--	bind [i][0]
--	while[<[i lst|length] do[
--		f[.[lst i]]
--		mutate*[i +[1 i]]
--	]]
--]!

bind [cons]
| of [head tail] [
	.[tail unshift][head]
]!

bind [list-assign]
| of [lst {lsts}] [
	bind [ret] [list!]
	
	bind [i] [0]
	
	while [<[i lsts|length] do[
		bind [l] [lsts|id*[i]]
		bind [j] [0]
		
		while [<[j l|length] do[
			.[ret push][l|j]
		]]
	
		mutate*[i +[i 1]]
	]]
]!


--
-- buggy things
--
bind [num]
| macro [{args}]
	| if [is-defined|args|1][
        code'|invoke*[{args|1} number|{args|0} number|{args|2}]
    ]
    | code'|number|{args|0}

bind [set]
| macro [xa xop]
	| macro [xb]
		| code'|mutate*[{xa} invoke*[{xop xa xb}]] -- maybe here in op lies the problem -- permanent substitution
		
bind [<-]
| macro [aaa bbb]
    | code'|do[{bbb}]

bind [test]|number|2

-- seems that it makes xb be forever bound to if [false]...
-- maybe mutate* does something weird here?
set [test <-]
| if [false]
	[num|32]
| if [false]
	[number|33]
	[num[34 + 22]]
	       
--
-- tests
--

bind [fact]
| of [=|1] [1]
| of   [n] [* [n fact|- [n 1]]]
!

-- here be
fact[5]
-- dragons

bind [fib]
| of  [=|0] [0]
| of [<=|2] [1]
| of    [n] [+[fib|-[n 1] fib|-[n 2]]]
!

fib[3]

bind [x][5]

match [x]
| of  [=|0] [0]
| of [<=|2] [1]
| '[x greater than 2]


-- match [x] [fib] -- like postfix notation

-- functions*[of[] of[] of[]]

-- match [true]
-- | of [<[x 0]] ['[x is negative]]
-- | of      [_] ['[x is not negative]]
-- !

-- bind [t]
-- | if [>[a 0]] [a]
-- | if      [_] [0]
-- !

--
-- math
--
bind [square] -- perhaps make this native (js)/macro
| of [a] [
	*[a a]
]!

bind [sqrt] -- same
| of [a] [
	.[window Math sqrt][a]
]!

bind [sin]
| of [a] [
	.[window Math sin][a]
]!

bind [cos]
| of [a] [
	.[window Math cos][a]
]!

--
-- physics
--

bind [+vec]
| of [list[x1 y1] list[x2 y2]] [list[+[x1 x2] +[y1 y2]]]
!

bind [-vec]
| of [list[x1 y1] list[x2 y2]] [list[-[x1 x2] -[y1 y2]]]
!

bind [*vec]
| of [list[x1 y1] s] [list[*[x1 s] *[y1 s]]]
!

bind [line-circle-collision]
| of [line circle] [
	bind [d] [-vec[.[line 1] .[line 0]]]
	bind [f] [-vec[.[line 0] .[circle 0]]]
	
	bind [a] |+[square|.[d 0] square|.[d 1]]
	bind [b] |*[2 +[*[.[f 0] .[d 0]] *[.[f 1] .[d 1]]]]
	--bind [b] |*[2 +[
	--		*[.[f 0] .[d 0]] 
	--		*[.[f 1] .[d 1]]
	--]]
	-- bind [b] |*[2 +[*[f|0 d|0] *[f|1 d|1]]] -- perhaps this notation should be supported for lists
	bind [c] |-[+[square|.[f 0] square|.[f 1]] square|.[circle 1]]
	bind [delta] |-[square|b *[4 *[a c]]] -- *[4 a c]
	
	if [>=[delta 0]] [
		mutate* [delta .[window Math sqrt][delta]]
		
		bind [t1] |/[-[-#|b delta] *[2 a]]
		bind [t2] |/[+[-#|b delta] *[2 a]]
		
		or[and[>=[t1 0] <=[t1 1]] and[>=[t2 0] <=[t2 1]]]
	]
	| false
]!

bind [circle-circle-collision]
| of [circle-1 circle-2] [
	bind [v] |-vec[.[circle-1 0] .[circle-2 0]]
	bind [r] |+[.[circle-1 1] .[circle-2 1]]
	
	<[+[square|.[v 0] square|.[v 1]] square|r]
]!

bind [point-distance]
| of [p1 p2] [
	bind [diff] |-vec[p1 p2]
	.[window Math sqrt]|+[square|.[diff 0] square|.[diff 1]]
]!

--
-- output window
--
bind [iframe]|.[window document get-element-by-id]['|page]
bind [game-window]|.[iframe content-window]

bind [set-page]
| of [src] [
	:[iframe srcdoc src]
	-- modify [iframe] [srcdoc] [src]
	-- assign [iframe] [srcdoc] [src] -- assign means modify or extend
]!

--
-- game
--

-- game output
bind  [canvas-width] [600]
bind [canvas-height] [480]
bind  [container-id] |'[pillman-container]
bind      [canvas-A] |'[game-canvas-A]
bind      [canvas-B] |'[game-canvas-B]
		
set-page[html'[
<head>
	<style>
		body {
			background-color: #111;
			color: #ddd;
            transform: scale(0.7) translate(-40%, -20%);
		}

		a {
			color: #d99;
		}

		#info {
			font-size: 48px;
		}

		#container {
			width: 50%;
			margin: auto;
			text-align: center;
		}
		#{{container-id}} {
			position: relative;
			width: {{canvas-width}}px;
			height: {{canvas-height}}px;
			background-color: #010101;
			margin: auto;
		}

		#{{canvas-B}} {
			display: none;
			position: absolute;
			top: 0px;
			left: 0px;
		}

		#{{canvas-A}} {
			display: block;
			position: absolute;
			top: 0px;
			left: 0px;
		}

	</style>
</head>
<body>
	<div id="container">
		<h1>Pillman</h1>
		
		<div id="{{container-id}}" tabindex="1">
			<canvas id="{{canvas-A}}" width="{{canvas-width}}" height="{{canvas-height}}"></canvas>
			<canvas id="{{canvas-B}}" width="{{canvas-width}}" height="{{canvas-height}}"></canvas>
			<div id="info">Click this canvas to start.</div>
		</div>

		<div id="msg"></div>
		<span>The canvas above must be focused for the keyboard input to work.</span><br />
		<span>[SPACEBAR] controls Pillman</span><br />
		<span>or alternatively</span><br />
		<span>[Z] changes Pillman's direction and [X] changes Pillman's planet</span><br />
		<br />
		<span>[F2] restarts the game</span><br />
		<span>[F4] snapshots the canvas</span><br />
		<a id="download" tabindex="2" download=""></a>
	</div>
</body>
]]
			
-- .[lst 0]
-- lst[0]
-- lst|0
-- 0|lst
-- .[lst push]|5 -- could be colored specially
-- semantic coloring: when names don't mean values, should be different colors
-- bind [these are different][...]
-- lst['|push]|5


bind  [restart-key-code] [113]
bind [download-key-code] [115]
bind    [space-key-code] [67]--[32]
bind        [z-key-code] [90]
bind        [x-key-code] [88]

bind     [is-game-running] [false]
bind [is-time-for-restart] [true]
bind         [input-queue] [list!]
bind    [initial-fps-info] [dict* [
	frame-count 0
	d-fps 0
	avg-fps 0
	fps-acc 0
	lo-fps 1000000
	hi-fps 0
	lo-fps-frame 0
	up-frames 0
	down-frames 0
]]

-- simulation settings
bind [step][/[1 60]]
bind [double-buffer][false] -- note: it's off since I'm using requestAnimationFrame

bind [debug][true]

-- game state
bind [timeouts]
| dict* [
	eaten 120
	trapped 240
	vulnerable 720
	transition 60
	eat 10
	idle 120
	ate 60
]

-- temporary
bind [pillman-r][7]
bind [margin][8]
bind [pill-r][2]
bind [power-pill-r][4]

bind [regular-pill-score][10]
bind [power-pill-score][50]

bind [big-r][24]

bind [planets][
	.[window JSON parse][
		html'[
			{
				"middle":{"x":308,"y":224,"r":22},
				"above-middle":{"x":308,"y":144,"r":26},
				"below-middle":{"x":308,"y":304,"r":26},
				"above-middle-right":{"x":388,"y":144,"r":26},
				"above-middle-left":{"x":228,"y":144,"r":26},
				"bottom":{"x":308,"y":384,"r":26},
				"bottom-left":{"x":228,"y":384,"r":26},
				"bottom-right":{"x":388,"y":384,"r":26},
				"upper":{"x":308,"y":80,"r":10},
				"bottom-left-left":{"x":164,"y":384,"r":10},
				"bottom-right-right":{"x":452,"y":384,"r":10},
				"above-middle-right-right":{"x":452,"y":144,"r":10},
				"above-middle-left-left":{"x":164,"y":144,"r":10},
				"upper-left":{"x":252,"y":80,"r":18},
				"upper-right":{"x":364,"y":80,"r":18},
				"upper-right-right":{"x":428,"y":84,"r":18},
				"upper-left-left":{"x":188,"y":84,"r":18},
				"middle-right":{"x":380,"y":216,"r":18},
				"middle-left":{"x":236,"y":216,"r":18},
				"middle-left-left":{"x":180,"y":244,"r":18},
				"middle-right-right":{"x":436,"y":244,"r":18},
				"below-middle-right":{"x":388,"y":288,"r":18},
				"below-middle-left":{"x":228,"y":288,"r":18},
				"above-bottom-left-left":{"x":180,"y":332,"r":18},
				"above-bottom-right-right":{"x":436,"y":332,"r":18},
				"right-teleport":{"x":484,"y":244,"r":4},
				"left-teleport":{"x":132,"y":244,"r":4}
			}
		]
	]
]

bind [connections][
	list[
		list[planets|middle planets|above-middle]
		list[planets|middle planets|below-middle]
		list[planets|middle planets|middle-left]
		list[planets|middle planets|middle-right]
		list[planets|above-middle-right planets|middle-right]
		list[planets|above-middle-left planets|middle-left]
		list[planets|above-middle-left planets|above-middle]
		list[planets|above-middle planets|above-middle-right]
		list[planets|upper-right planets|above-middle-right]
		list[planets|upper-right-right planets|above-middle-right]
		list[planets|above-middle-right planets|above-middle-right-right]
		list[planets|upper-right-right planets|upper-right]
		list[planets|upper-left planets|upper]
		list[planets|upper planets|upper-right]
		list[planets|upper planets|above-middle]
		list[planets|upper-left planets|above-middle-left]
		list[planets|above-middle-left planets|upper-left-left]
		list[planets|upper-left-left planets|upper-left]
		list[planets|above-middle-left-left planets|above-middle-left]
		list[planets|middle-left planets|middle-left-left]
		list[planets|middle-left-left planets|left-teleport]
		list[planets|middle-right-right planets|middle-right-right]
		list[planets|middle-right-right planets|middle-right-right]
		list[planets|right-teleport planets|middle-right-right]
		list[planets|middle-right-right planets|middle-right]
		list[planets|middle-right-right planets|middle-right-right]
		list[planets|below-middle-right planets|middle-right-right]
		list[planets|below-middle planets|bottom]
		list[planets|bottom planets|bottom-left]
		list[planets|bottom-right planets|bottom]
		list[planets|below-middle-right planets|above-bottom-right-right]
		list[planets|above-bottom-right-right planets|above-bottom-right-right]
		list[planets|bottom-right planets|above-bottom-right-right]
		list[planets|bottom-right-right planets|bottom-right]
		list[planets|bottom-left planets|bottom-left-left]
		list[planets|above-bottom-left-left planets|bottom-left]
		list[planets|below-middle-left planets|above-bottom-left-left]
		list[planets|below-middle-left planets|middle-left-left]
	]
]

-- pills
bind [initial-pills]
| map-dict-to-list* [planets of [x k _] [
	bind[rr-2][+[+[x|r 5] margin]]
	
	if [any[=[k '|middle] =[k '|left-teleport] =[k '|right-teleport]]] [
		list[x list!]
	] [
		bind [special-pill][list!]
		bind [pill-range][list!]
		bind [pi*-half][*[-#[0.5] .[window Math PI]]]
		bind [pi*-1.5][*[-#[1.5] .[window Math PI]]]
		
		match [k]
		| of [=|'|bottom-left-left] [
			mutate* [special-pill list[
				to-int[+[*[sin[pi*-half] rr-2] x|x]]
				to-int[+[*[cos[pi*-half] rr-2] x|y]]
				1
			]]-- '|power]]
			mutate* [pill-range range[-4 16]]
		]
		| of [=|'|bottom-right-right] [
			mutate* [special-pill list[
				to-int[+[*[sin[pi*-1.5] rr-2] x|x]]
				to-int[+[*[cos[pi*-1.5] rr-2] x|y]]
				1
			]]-- '|power]]
			mutate* [pill-range range[-15 5]]
		]
		| of [=|'|above-middle-left-left] [
			mutate* [special-pill list[
				to-int[+[*[sin[pi*-half] rr-2] x|x]]
				to-int[+[*[cos[pi*-half] rr-2] x|y]]
				1 -- '|power
			]]
			mutate* [pill-range range[-4 16]]
		]
		| of [=|'|above-middle-right-right] [
			mutate* [special-pill list[
				to-int[+[*[sin[pi*-1.5] rr-2] x|x]]
				to-int[+[*[cos[pi*-1.5] rr-2] x|y]]
				1
			]]-- '|power]]
			
			mutate* [pill-range range[-15 5]]
		] 
		| do [
			mutate* [special-pill list!]
			mutate* [pill-range range[0 22]]
		]
		
		bind [regular-pills]
		| map [of [y] [
			bind[y/11*pi][*[/[y 11] .[window Math PI]]]
			list[
				to-int[+[*[sin[y/11*pi] rr-2] x|x]]
				to-int[+[*[cos[y/11*pi] rr-2] x|y]]
			0]--'|regular]
		]! pill-range]
		
		bind [pills][list!]
		.[pills push][special-pill]
		bind[i][0]
		while [<[i regular-pills|length] do[
			.[pills push][regular-pills|id*[i]]
			mutate*[i +[1 i]]
		]]
		list[x if [=[special-pill|length 0]] [regular-pills] [pills]]
	]
]!]

bind [pill-length]
| of [l n] [
	if [=[l|length 0]] [n]
	| do [
		bind [p] [l|0]
		bind [t] [.[l slice][1]]
		
		if [=[p|2 '|regular]] [
			pill-length[t +[1 n]]
		] [
			pill-length[t n]
		]
	]
]!

bind [count-pills]
| of [l] [
	bind [i][0]
	bind [j][0]
	bind [sum][0]
	bind [h][list!]
	
	while [<[i l|length] do[
		mutate* [h .[l id*[i]]]
		mutate* [j 0]
		
		while [<[j .[h 1 length]] do[
			mutate*[sum +[sum 1]]
			
			mutate*[j +[j 1]]
		]]
		
		mutate*[i +[i 1]]
	]]
	sum
]!

bind [pill-count] [count-pills[initial-pills]]

bind [pillman]
| dict*[
	idx 0
	position list[100 100]
	planet planets|below-middle
	angle .[window Math PI]
	dir 1
	base-speed 0.02
	speed 0.02
	r pillman-r
	next-planet planets|middle
	state '|normal
	timeout 0
	state-2 '|normal
	timeout-2 0
]

bind [pillman-blueprint] | assign* [dict*! pillman]

bind [get-initial-game-state]
| of![
	--bind [game-state][scope*!]
	--bind* [args-list[command] list|'|run game-state]
	
	--bind [game-state]
	--| 
	dict* [
		pillman pillman
		-- roger roger
		-- johnny johnny
		-- greg greg
		-- bill bill
		pills initial-pills
		score 0
		pill-count 0
		lives 3
		level 1
		mode '|on
		timeout 0
		timeouts timeouts
		command '|run
	]
	
	--game-state
	
	-- :[game-state command '|run]
]!

-- bind [%]
-- | macro [a op b]
--	| code'{op}[{a b}]

-- macro -> on

bind [min]
| of [a b] [
	if [<[a  b]] [a]
	| b
]!
	
bind [handle-keys]
| of [input game-state] [
	if [>[.[input length] 0]] [
		fold-right[handle-key game-state input]
	]
	| game-state
]!
	
bind [get-next-planet]
| of [entity connections] [
	bind [i][0]
	bind [x][list!]
	bind [ret][.[entity planet]]
	while [<[i connections|length] do[
		mutate*[x connections|id*[i]]
		
		if[line-circle-collision[list[list[.[x 0 x] .[x 0 y]] list[.[x 1 x] .[x 1 y]]] list[.[entity position] .[entity r]]]] [
			if [=[entity|planet x|1]] [
				mutate* [ret x|0]
			] [
				mutate* [ret x|1]
			]
		] [
			-- carry on
		]
	
		mutate*[i +[1 i]]
	]]
	ret
]!
	
-- todo: fix this
bind [change-pillman-planet]
| of [game-state] [
	if [<>[.[game-state pillman next-planet] .[game-state pillman planet]]] [
		bind [new-planet]
		| match [.[game-state pillman next-planet]]
			| of [.[planets teleport-left]] [.[planets middle-right-right]]
			| of [.[planets teleport-right]] [.[planets middle-left-left]]
			| .[game-state pillman next-planet]
		--:[game-state pillman planet new-planet]
		--:[game-state pillman angle +[.[game-state pillman angle] .[window Math PI]]]
		--game-state
		
		assign* [.[game-state pillman] dict* [
			planet new-planet
			angle +[.[game-state pillman angle] .[window Math PI]]
		]]
		
		game-state
		
		--inside [game-state pillman]
		--| mutate [planet angle] [new-planet +[.[game-state pillman angle] .[window Math PI]]]
		
		--mutate-in [game-state pillman]
		--	[planet angle]
		--	[new-planet +[.[game-state pillman angle] .[window Math PI]]]
	]
	| game-state
]!
	
bind [handle-key]
| of [key game-state] [
	match [key]
	| of [list[=|restart-key-code =|'|down]] [mutate-in* [command '|restart game-state]]
	| of [list[=|download-key-code =|'|down]] [mutate-in* [command '|download game-state]]
	| if [=[.[game-state mode] '|on]] [
		match [key]
		| of [list[=|space-key-code =|'|down]] [
			mutate* [game-state change-pillman-planet[game-state]]
			--mutate-in* [dir -#|.[game-state pillman dir] .[game-state pillman]] 
			
			
			-- :[game-state change-pillman-planet[game-state]]
			-- this will set even if not defined:
			:[game-state pillman dir -#|.[game-state pillman dir]] -- negate[.[game-state pillman dir]]
			mutate*[input-queue list!] -- note: this is a hack, fix this
			game-state
		]
		| of [list[=|z-key-code =|'|down]] [
			:[game-state pillman dir -#|.[game-state pillman dir]] -- negate[.[game-state pillman dir]]
			mutate*[input-queue list!] -- note: this is a hack, fix this
			game-state
		]
		| of [list[=|x-key-code =|'|down]] [
			mutate* [game-state change-pillman-planet[game-state]]
		]
		| game-state
	]
	| game-state
	
	
]!

-- entity manipulation
bind [update-pillman]
| of [game-state] [
	bind [pillman] [.[game-state pillman]]
	bind [pillman-rr] [+[.[pillman planet r] +[pillman-r margin]]]
	
	
	assign* [.[game-state pillman]
		dict* [
			angle +[*[.[pillman dir] .[pillman speed]] .[pillman angle]]
			position list[
				--to-int[+[*[+[pillman-rr .[window Math random]!] sin[.[pillman angle]]] .[pillman planet x]]] -- +*[pillman-rr sin[previous-angle] .[pillman planet x]]
				--to-int[+[*[+[pillman-rr .[window Math random]!] cos[.[pillman angle]]] .[pillman planet y]]]
				+[*[pillman-rr sin[.[pillman angle]]] .[pillman planet x]] -- +*[pillman-rr sin[previous-angle] .[pillman planet x]]
				+[*[pillman-rr cos[.[pillman angle]]] .[pillman planet y]]
			]
			next-planet get-next-planet[pillman connections]
		]
	]
	
	if [>[.[pillman timeout] 0]] [
		assign* [.[game-state pillman] dict* [timeout -[.[pillman timeout] 1]]]
	]
	| if [=[.[pillman state] '|normal]] [
		assign* [.[game-state pillman] dict* [state '|backward timeout .[game-state timeouts eat]]]
	]
	| if [=[.[pillman state] '|backward]] [
		assign* [.[game-state pillman] dict* [state '|normal timeout .[game-state timeouts eat]]]
	]
	!
	
	.[game-state pillman]
]!

-- eats a pill if possible and updates the game state
bind [get-new-pills-and-score]
| of [game-state] [
	bind[i][0]
	bind[j][0]
	bind[l][.[game-state pills]]
	bind[pill-planet][list!]
	bind[pills][list!]
	bind[pill][list!]
	
	while [<[i l|length] do[
		mutate* [pill-planet .[l id*[i]]]
		mutate* [pills pill-planet|1]
		
		if [=[.[game-state pillman planet] pill-planet|0]] [
			mutate* [j 0]
			
			while [<[j pills|length] do[
				mutate* [pill .[pills id*[j]]]
				
				if [circle-circle-collision[
						list[list[pill|0 pill|1] pill-r]
						list[.[game-state pillman position] pillman-r]
					]] [
					
					match [pill|2]
					| of [0] [ -- regular
						assign* [game-state dict*[
							score +[.[game-state score] regular-pill-score]
							pill-count +[.[game-state pill-count] 1]
						]]
					]
					| of [1] [ -- power
						assign* [game-state dict*[
							score +[.[game-state score] power-pill-score]
							-- todo: transform ghosts here
						]]
					]
					| do []
					
					.[pills splice][j 1]
				] [
					-- carry on
				]
				
				mutate* [j +[j 1]]
			]]
		] [
		
		]
		
		--assign*[game-state dict*[
		--	pills new-pills
		--]]
		
		mutate*[i +[i 1]]
	]]
	
	game-state
]!

bind [main-game-logic]
| of [game-state input] [
	assign* [game-state dict* [
		pillman update-pillman[game-state]
	] handle-keys[input game-state]]
	get-new-pills-and-score[game-state]

	game-state
]!

bind [update-logic]
| of [delta game-state input] [
	if [>[delta step]] [
		mutate* [game-state main-game-logic[game-state input]]
		
		update-logic[-[delta step] game-state list!]
	]
	| list[game-state delta]
]!


-- drawing aux
bind [clear]
| of [ctx] [
	:[ctx fillStyle '|#000]
	.[ctx fillRect][0 0 .[ctx canvas width] .[ctx canvas height]]
]!

-- bind [math] [.[window Math]]

bind [fill-circle-old]
| of [ctx x y r] [
	.[ctx beginPath]!
	.[ctx arc][x y r 0 *[2 .[window Math PI]] true]
	.[ctx fill]!
	.[ctx closePath]!
	-- ctx|arc[x y r 0 math|PI] -- todo: allow that again for one property (no quote needed)
]!

bind [pi][.[window Math PI]]
bind [pi*2][*[2 pi]]
define* [fill-circle function* [ctx x y r do[
	.[ctx beginPath]!
	.[ctx arc][x y r 0 pi*2 true]
	.[ctx closePath]!
	.[ctx fill]!
	-- ctx|arc[x y r 0 math|PI] -- todo: allow that again for one property (no quote needed)
]]]

bind [swap-buffers]
| of [main-canvas disp-canvas] [
	bind [disp][.[game-window document getElementById][disp-canvas]]
	bind [main][.[game-window document getElementById][main-canvas]]
	bind [ctx][.[disp getContext]['|2d]]
	.[ctx drawImage][main 0 0]
	
	-- bind [condition] [=[.[main style display] '|block]]
	
	:[main style display '|block]
	:[disp style display '|none]
	
	clear[ctx]
]!

bind [xx][10]

--
--
-- drawing
--
-- 

--
-- colors
--
bind [pillman-color]['|#cc4]
bind [pupil-color]['|#111]
bind [eye-color]['|#ddd]
bind [text-color]['|#ddd]
bind [blink-color]['|#ddd]
bind [game-over-color]['|#c66]
bind [planet-color]['|#115]
bind [highlight-color]['|#282]

--
-- auxiliary drawing functions
--

bind [draw-pillman]
| of [ctx pillman game-state] [		
	match [.[game-state command]]
	| of [=|'|eaten-2] [ -- draw final frame of eaten animation
		bind [x] [.[pillman position 0]]
		bind [y] [.[pillman position 1]]
		
		:[ctx lineWidth 1]
		:[ctx strokeStyle pillman-color]
		.[ctx beginPath]!
		 
		.[ctx moveTo][x -[y 3]]
		.[ctx lineTo][x -[y 5]]
		.[ctx moveTo][x +[y 3]]
		.[ctx lineTo][x +[y 5]]
		.[ctx moveTo][-[x 3] y]
		.[ctx lineTo][-[x 5] y]
		.[ctx moveTo][+[x 3] y]
		.[ctx lineTo][+[x 5] y]
		
		.[ctx moveTo][-[x 2] -[y 2]]
		.[ctx lineTo][-[x 4] -[y 4]]
		.[ctx moveTo][+[x 2] +[y 2]]
		.[ctx lineTo][+[x 4] +[y 4]]
		.[ctx moveTo][-[x 2] +[y 2]]
		.[ctx lineTo][-[x 4] +[y 4]]
		.[ctx moveTo][+[x 2] -[y 2]]
		.[ctx lineTo][+[x 4] -[y 4]]
		
		.[ctx closePath]!
		.[ctx stroke]!
	]
	| do [ -- draw regular animation or animation for being eaten
  		bind* [
  			args-list[timeout total-timeout pi-fraction]
  			if [=[.[game-state command] '|eaten]] [
  				list[
  					.[game-state timeout]
  					+[1 .[game-state timeouts eaten]]
  					1
  				]
  			] [
  				list[
  					.[pillman timeout]
  					+[1 .[game-state timeouts eat]]
  					0.3
  				]
  			]
  		]
		
		-- bind* [name value] -- for simple values
		-- bind [...][...] -- for complex values
		
		-- of* [{args} body] -- simple
		-- of [] [] [] -- complex
		
		bind [angle]
		| if [=[.[pillman dir] 1]] [
			-[-#[.[pillman angle]] *[+[pi-fraction 0.1] .[window Math PI]]]
		] [
			+[-#[.[pillman angle]] *[-[1.1 pi-fraction] .[window Math PI]]]
		]
		
		bind [mouth-open]
		| match [.[pillman state]]
			| of [=|'|normal] [
				*[pi-fraction *[.[window Math PI] /[+[timeout 1] total-timeout]]]
			]
			| of [=|'|backward] [
				*[pi-fraction *[.[window Math PI] /[+[-[total-timeout timeout] 1] total-timeout]]]
			]
			| 0
			
	--	bind [mouth-open]
	--	| if [=[.[pillman state] '|normal]] [
	--		*[pi-fraction *[.[window Math PI] /[+[timeout 1] total-timeout]]]
	--	]
	--	| if [=[.[pillman state] '|backward]] [
	--		*[pi-fraction *[.[window Math PI] /[+[-[total-timeout timeout] 1]] total-timeout]]
	--	] [0]
		
			
		:[ctx fillStyle pillman-color]
		.[ctx beginPath]!
		
		.[ctx moveTo][.[pillman position 0] .[pillman position 1]]
		.[ctx arc] [
			.[pillman position 0]
			.[pillman position 1]
			pillman-r
			+[-[*[-[1 pi-fraction] .[window Math PI]] mouth-open] angle]
			+[mouth-open angle]
			false
		]
		.[ctx lineTo][.[pillman position 0] .[pillman position 1]]
		
		.[ctx closePath]!
		.[ctx fill]!
		
		-- draw the eye
		match [.[game-state command]]
		| of [=|'|eaten] []
		| of [=|'|eaten-2] []
		| do [
			bind [pillman-rr] [+[+[.[pillman planet r] .[pillman r]] margin]]
			bind [tail-length] [*[/[+[+[pillman-r margin] big-r] pillman-rr] 0.125]]
			bind [dir*length] [*[.[pillman dir] tail-length]]
			bind [angle-dir*length] [-[.[pillman angle] dir*length]]
			bind [rr+-2] [-[pillman-rr 2]]
			bind [x] [.[pillman planet x]]
			bind [y] [.[pillman planet y]]
			bind [rr+-2*sin] [*[rr+-2 sin|angle-dir*length]]
			bind [rr+-2*cos] [*[rr+-2 cos|angle-dir*length]]
			bind [rr+-2*sin+x] [+[rr+-2*sin x]]
			bind [rr+-2*cos+y] [+[rr+-2*cos y]]
			
			:[ctx fillStyle pupil-color]
			fill-circle[ctx rr+-2*sin+x rr+-2*cos+y 2]
			:[ctx fillStyle eye-color]
			fill-circle[ctx rr+-2*sin+x rr+-2*cos+y 1]
			0
		]
		0
	]
]!

bind [draw-hud]
| of [ctx game-state] [
	:[ctx fillStyle text-color]
	ctx[fillText]['[Pills: {game-state|pill-count}/{pill-count}] 10 30]
	ctx[fillText]['[Score: {game-state|score}] 10 40]
	ctx[fillText]['[Pills: {game-state|level}] 10 50]

	if [<[game-state|lives 0]] [
		:[ctx fillStyle game-over-color]
		ctx[fillText]['[GAME OVER] 10 70]
	] [
		ctx[fillText]['[Lives: {game-state|lives}] 10 70]

		map-side[
			of [x] [
				bind[pos][list[+[*[*[x 2.5] pillman-r] 20] 90]]
				bind[blueprint][
					assign* [
						dict*!
						pillman-blueprint
						dict* [
							position pos
							planet dict* [
								x pos|0
								y pos|1
								r -10
							]
						]
					]
				]
				bind [gs][assign*[dict*! game-state dict* [mode '|on]]]
				draw-pillman[ctx blueprint gs]
			]!
			range[0 -[game-state|lives 1]] -- temp
		]
	]
]!

bind [game-area-offset] [list[108 24]]
bind [draw-game-area]
| of [ctx offset game-state] [
	ctx[save]!
	
	--ctx[translate][offset|0 offset|1]
	--ctx[restore]!
	
	ctx[beginPath]!
	:[ctx strokeStyle '|#444]
	ctx[setLineDash][list[2 5]]
	
	
	-- could also draw the static stuff statically -- predraw on a hidden canvas, then display that every frame
	-- draw the connections between planets
	map-side[of [x] [
		ctx[moveTo][
			--to-int[+[.[window Math random]! .[x 0 x]]]
			--to-int[+[.[window Math random]! .[x 0 y]]]
			.[x 0 x]
			.[x 0 y]
		]
		ctx[lineTo][
			--to-int[+[.[window Math random]! .[x 1 x]]]
			--to-int[+[.[window Math random]! .[x 1 y]]]
			.[x 1 x]
			.[x 1 y]
		]
		ctx[stroke]!
	]! connections]
	ctx[closePath]!

	-- highlight the connection which pillman collides with
	if [and[<>[.[game-state pillman planet] .[game-state pillman next-planet]] =[.[game-state mode] '|on]]] [
		:[ctx strokeStyle highlight-color]
		:[ctx lineWidth 4]
		ctx[beginPath]!
		ctx[moveTo][
			+[.[window Math random]! .[game-state pillman planet x]]
			+[.[window Math random]! .[game-state pillman planet y]]
		]
		ctx[lineTo][
			+[.[window Math random]! .[game-state pillman next-planet x]]
			+[.[window Math random]! .[game-state pillman next-planet y]]
		]
		ctx[stroke]!
		ctx[closePath]!
	]!
	:[ctx strokeStyle '|#333]
	:[ctx lineWidth 1]
	
	-- draw ghost planet bottom layer
	:[ctx fillStyle '|#003]
	--fill-circle[ctx +[.[window Math random]! .[planets middle x]] +[.[window Math random]! .[planets middle y]] +[.[window Math random]! *[.[planets middle r] 1.2]]]
	fill-circle[ctx .[planets middle x] .[planets middle y] *[.[planets middle r] 1.2]]
	
	-- draw the planets
	
	if [and[=[.[game-state mode] '|next-level] >[mod[game-state|timeout 20] 10]]] [
		:[ctx fillStyle blink-color]
	] [
		:[ctx fillStyle planet-color]
	]
	
	map-dict*[planets of [x _ _] [
		fill-circle[
			ctx
			--to-int[+[.[window Math random]! x|x]]
			--to-int[+[.[window Math random]! x|y]]
			--to-int[+[.[window Math random]! x|r]]
			x|x
			x|y
			x|r
		]
	]!]
	
	-- draw ghost planet top layer
	:[ctx fillStyle '|#226]
	--fill-circle[ctx +[.[window Math random]! .[planets middle x]] +[.[window Math random]! .[planets middle y]] +[.[window Math random]! *[.[planets middle r] 0.8]]]
	fill-circle[ctx .[planets middle x] .[planets middle y] *[.[planets middle r] 0.8]]
	
	
	-- draw pills
	:[ctx fillStyle pillman-color]
	map-side[of [x] [
		map-side[of [y] [
			--if [=[y|2 '|regular]] [
			--	fill-circle[ctx +[.[window Math random]! y|0] +[.[window Math random]! y|1] pill-r]
			--]
			--| if [=[y|2 '|power]] [
			--	fill-circle[ctx +[.[window Math random]! y|0] +[.[window Math random]! y|1] power-pill-r]
			--]
			--| do []
			
			--match [y|2]
			--| of [=|0] [
			--	fill-circle[ctx to-int[+[.[window Math random]! y|0]] +[.[window Math random]! y|1] pill-r]
			--]
			--| of [=|1] [
			--	fill-circle[ctx +[.[window Math random]! y|0] +[.[window Math random]! y|1] power-pill-r]
			--] | 0
			
			if* [=[y|2 0]--'|regular]
				fill-circle[
					ctx
					y|0 -- to-int[+[.[window Math random]! y|0]]
					y|1 -- to-int[+[.[window Math random]! y|1]]
					pill-r
				]
			if* [=[y|2 1]--'|power]
				fill-circle[
					ctx
					y|0 -- to-int[+[.[window Math random]! y|0]]
					y|1 -- to-int[+[.[window Math random]! y|1]]
					power-pill-r
				]
				do[]
			]]
		]! x|1]
	]! game-state|pills]
-- ...
]!


-- draw fps
bind [draw-fps]
| of [ctx fps-info d-fps] [
	-- note: should set color here
	assign*[fps-info dict* [frame-count +[fps-info|frame-count 1] d-fps d-fps]]
	
	ctx[fillText]['[FPS: {.[window Math round][d-fps]}] 10 10]
	
	if [>[fps-info|lo-fps d-fps]] [
		assign*[fps-info dict* [lo-fps d-fps lo-fps-frame -[fps-info|frame-count 1]]]
	]!
	
	if [<[fps-info|hi-fps d-fps]] [
		assign*[fps-info dict* [hi-fps d-fps]]
	]!
	
	assign*[fps-info dict* [fps-acc +[fps-info|fps-acc d-fps]]]
	
	bind [a-fps-frames] [100]
	
	if [>[fps-info|frame-count a-fps-frames]] [
		assign*[fps-info dict* [avg-fps /[fps-info|fps-acc a-fps-frames] fps-acc 0 frame-count 0]]
	]!
	
	if [>[fps-info|avg-fps 0]] [
		if [<[d-fps *[0.5 fps-info|avg-fps]]] [
			assign*[fps-info dict* [down-frames +[fps-info|down-frames 1]]]
		] [
			assign*[fps-info dict* [up-frames +[fps-info|up-frames 1]]]
		]
	] [
		assign*[fps-info dict* [hi-fps 0]]
	]
	
	if [=[fps-info|hi-fps 0]] [
		ctx[fillText]['[loading data: {fps-info|frame-count}/{a-fps-frames}] 100 10]
	] [
		ctx[fillText]['[highest FPS: {.[window Math round][fps-info|hi-fps]}] 100 10]
		ctx[fillText]['[lowest FPS: {.[window Math round][fps-info|lo-fps]}] 200 10]
	]
	
	fps-info	
]!

--
-- main drawing function
--
bind [draw]
| of [game-state previous-time now fps-info] [
	bind[condition][or[=[.[.[game-window document getElementById][canvas-A] style display] '|none] not[double-buffer]]]

	bind [main-canvas][if[condition][canvas-A][canvas-B]]
	bind [disp-canvas][if[condition][canvas-B][canvas-A]]
	
	bind [ctx][.[.[game-window document getElementById][main-canvas] getContext]['|2d]]
	
	clear [ctx]
	
	draw-hud[ctx game-state]
	
	draw-game-area[ctx game-area-offset game-state]
	
	
	--:[pillman position 0 +[.[pillman position 0] 1]]
	draw-pillman[ctx pillman game-state]
	
	
	--.[.[.[game-window document getElementById][disp-canvas] getContext]['|2d] setFillColor][pillman-color]
	--.[.[.[game-window document getElementById][disp-canvas] getContext]['|2d] fillRect][0 0 100 100]
	
	
	
	-- calculate and draw new fpsInfo
	bind [d-fps] [/[1000.0 +[-[now previous-time] 1.0]]]
	:[ctx fillStyle text-color]
	if [debug] [
		assign* [fps-info draw-fps[ctx fps-info d-fps]]
	]!
	
	-- double buffering
	if [double-buffer][swap-buffers[main-canvas disp-canvas]]!


	fps-info
]!

-- todo: implement missing pieces from here
-- implement bind-in, set-in macros based on new bind* primitive; add set* primitive
-- speed up parsing by removing all the debug stuff that gets displayed
-- fix the error on startup, when this file is loaded
bind [main-loop] -- this should be update-game
| of [game-state delta previous-time fps-info] [
	-- log|'[main loop executing]
	--bind [input]|.[input-queue shift]! -- consider resetting input
	bind [input][input-queue] -- consider resetting input
	bind [now]|.[game-window Date now]!
	mutate* [delta +[delta min[1 /[-[now previous-time] 1000]]]]
	-- debug*!
	-- note: the next line causes bug with set
	-- set [delta <-]|+[delta min[1 /[-[now previous-time] 1000]]]
	-- #[delta + min[1 #[#[now - previous-time] / 1000]]]
	-- %[delta + min[1 %[%[now - previous-time] / 1000]]]
	-- (delta + min[1 ((now - previous-time) / 1000)])
	
	-- bind [list[new-game-state new-delta]]|update-logic[delta game-state input]
	bind [temp]|update-logic[delta game-state input]
	bind [new-game-state]|.[temp 0]
	bind [new-delta]|.[temp 1]
	
	if [=[.[new-game-state command] '|restart]] [
		-- log|'|restarting
		async*[.[game-window request-animation-frame] update-game]
	]
	| if [=[new-delta delta]] [ -- don't redraw if no logic updates
		-- log|'|no-redraw
		async*[
			.[game-window request-animation-frame]
			of![
				main-loop[new-game-state new-delta now fps-info]
			]!
		]
	]
	| async*[
		.[game-window request-animation-frame]
		of![
			main-loop[
				if [=[.[new-game-state command] '|download]] [
					-- set-in[new-game-state][command]['|run] -- returns updated new-game-state
					mutate-in* [command '|run new-game-state]
				]
				| new-game-state
				new-delta
				now
				draw[new-game-state previous-time now fps-info]
			]
		]!
	]
]!

bind [update-game] -- this should be (re)start-game
| of ![
	--
	-- call main-loop with initial game state
	-- 
	log|'[starting the game]
	async*[
		.[game-window request-animation-frame]
		of![
			main-loop[
				get-initial-game-state!
				0.0
				.[game-window Date now]!
				initial-fps-info
			]
		]!
	]
]!

bind [on-game-key-down]
| of [event] [
	.[input-queue push]|list[.[event key-code] '|down]
]!

bind [on-game-key-up]
| of [event] [
	.[input-queue push]|list[.[event key-code] '|up]
]!


bind [initialize-game]
| of [][
	if [=[false is-game-running]] [
		log|'[initializing the game]
		bind [game-container]|.[game-window document get-element-by-id][container-id]
		
		async*[.[game-container add-event-listener] '|keydown on-game-key-down]
		async*[.[game-container add-event-listener] '|keyup on-game-key-up]

		-- this should be mutate/set instead of bind
		bind*[args-list|display list|'[none] .[.[game-window document get-element-by-id]['|info] style]]
		
		mutate*[is-game-running true]
		
		-- note: should remove event listener instead of checking is-game-running,
		-- but in the current implementation it'll probably not work
		
		update-game!
	]
	| log|'[debug: game already initialized!]
]!

async*[.[window set-timeout] of![
	bind [c-a]|.[game-window document get-element-by-id][canvas-A]
	
	log|'|hello
	
	async*[.[c-a add-event-listener] '|focus initialize-game]
]! 500]

-- of[event]|log[event] -- make this an error
-- of[event]|log[event]! -- this is ok, as it says that alternative is undefined
-- of[event]|log[event]|'[nope] -- this is ok, as it supplies a value alternative that will always work

if**[true log['|it-works!] log['|idk-man]]
